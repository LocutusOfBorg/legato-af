sources:
{
    le_mqttClientLib.c

    mqttClient.c
    mqttAdaptor.c
    mqttTimer.c

    ${LEGATO_ROOT}/3rdParty/paho.mqtt.embedded-c/MQTTClient-C/src/MQTTClient.c

    ${LEGATO_ROOT}/3rdParty/paho.mqtt.embedded-c/MQTTPacket/src/MQTTPacket.c
    ${LEGATO_ROOT}/3rdParty/paho.mqtt.embedded-c/MQTTPacket/src/MQTTConnectClient.c
    ${LEGATO_ROOT}/3rdParty/paho.mqtt.embedded-c/MQTTPacket/src/MQTTSerializePublish.c
    ${LEGATO_ROOT}/3rdParty/paho.mqtt.embedded-c/MQTTPacket/src/MQTTUnsubscribeClient.c
    ${LEGATO_ROOT}/3rdParty/paho.mqtt.embedded-c/MQTTPacket/src/MQTTDeserializePublish.c
    ${LEGATO_ROOT}/3rdParty/paho.mqtt.embedded-c/MQTTPacket/src/MQTTSubscribeClient.c
}

cflags:
{
    -I${LEGATO_ROOT}/3rdParty/paho.mqtt.embedded-c/MQTTPacket/src/
    -I${LEGATO_ROOT}/3rdParty/paho.mqtt.embedded-c/MQTTClient-C/src/
    -I${LEGATO_ROOT}/components/socketLibrary
    -I${CURDIR}

    -DMQTTCLIENT_PLATFORM_HEADER=mqttAdaptor.h
    -DMQTT_TASK
    -DMAX_MESSAGE_HANDLERS=MK_CONFIG_MQTT_SUBSCRIB_TOPIC_MAX
#if ${LE_CONFIG_QMI} = y
#else
    -Wno-address-of-packed-member
#endif
}

requires:
{
    api:
    {
#if ${MK_CONFIG_MODEMSERVICE_COMPONENT} = y
        modemServices/le_mdc.api [types-only]
#else
        modemServices/le_mdc.api
#endif
        le_atDefs.api [types-only]
    }

    component:
    {
        ${LEGATO_ROOT}/components/socketLibrary
    }
}
